# Global
type BentoBox @entity {
  # Contract ID
  id: ID!
  lendingPairs: [LendingPair!]! @derivedFrom(field: "bentoBox")
  tokens: [Token!] @derivedFrom(field: "bentoBox")
  WETH: Bytes!
  withdrawals: [Withdrawal!] @derivedFrom(field: "bentoBox")
  deposits: [Deposit!] @derivedFrom(field: "bentoBox")
  flashloans: [FlashLoan!] @derivedFrom(field: "bentoBox")
  lendingPairsCount: BigInt!
}

type FlashLoan @entity {
  id: ID!
  bentoBox: BentoBox!
  user: User!
  token: Token!
  amount: BigInt!
  feeAmount: BigInt!
  block: BigInt!
  timestamp: BigInt!
}


type Deposit @entity {
  id: ID!
  bentoBox: BentoBox!
  from: User!
  to: User!
  token: Token!
  amount: BigInt!
  share: BigInt!
  block: BigInt!
  timestamp: BigInt!
}



type Withdrawal @entity {
  id: ID!
  bentoBox: BentoBox!
  from: User!
  to: Bytes!
  token: Token!
  amount: BigInt!
  share: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type Token @entity {
  id: ID!
  bentoBox: BentoBox!
  totalShare: BigInt!
  totalAmount: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type User @entity {
  id: ID!
  lendingPairs: [UserLendingPairData!] @derivedFrom(field: "owner")
  bentoData: [UserBentoTokenData!] @derivedFrom(field: "owner")
  masterContractApprovals: [MasterContractApproval!] @derivedFrom(field: "owner")
  withdrawals: [Withdrawal!] @derivedFrom(field: "from")
  deposits: [Deposit!] @derivedFrom(field: "to")
  flashloans: [FlashLoan!] @derivedFrom(field: "user")
  block: BigInt!
  timestamp: BigInt!
}

type UserBentoTokenData @entity {
  # concatenate UserAddress with TokenAddress
  id: ID!
  owner: User!
  token: Token!
  share: BigInt!
}

type MasterContractApproval @entity {
  # concatenate UserAddress with MasterContract
  id: ID!
  owner: User!
  approved: Boolean!
}

enum PairTransactionType {
  assetTx
  collateralTx
  borrowTx
}

type PairTx @entity {
    id: ID!
    type: PairTransactionType!
    lendingPair: LendingPair!
    token: Token!
    root: UserLendingPairData!
    amount: BigInt!
    share: BigInt!
    fraction: BigInt
    poolPercentage: BigInt!
    block: BigInt!
    timestamp: BigInt!
}

type UserLendingPairData @entity {
  # concatenate UserAddress with LendingPairAddress
  id: ID!
  lendingPair: LendingPair!
  owner: User!
  userCollateralShare: BigInt!
  balanceOf: BigInt!
  userBorrowFraction: BigInt!
  transactions: [PairTx!] @derivedFrom(field: "root")
}

type LendingPair @entity {
  id: ID!
  asset: Bytes!
  bentoBox: BentoBox!
  borrowOpeningFee: BigInt!
  closedCollaterizationRate: BigInt!
  collateral: Bytes!
  decimals: Int!
  dev: Bytes
  devFee: BigInt!
  exchangeRate: BigInt!
  feeTo: Bytes!
  feesPendingShare: BigInt!
  interestElasticity: BigInt!
  interestPerBlock: BigInt!
  lastBlockAccrued: BigInt!
  liquidationMultiplier: BigInt!
  masterContract: Bytes!
  maximumInterestPerBlock: BigInt!
  maximumTargetUtilization: BigInt!
  minimumInterestPerBlock: BigInt!
  minimumTargetUtilization: BigInt!
  name: String!
  openCollaterizationRate: BigInt!
  oracle: Bytes!
  owner: Bytes!
  pendingOwner: Bytes!
  protocolFee: BigInt!
  startingInterestPerBlock: BigInt!
  symbol: String!
  totalAssetShare: BigInt!
  totalBorrowFraction: BigInt!
  totalBorrowShare: BigInt!
  totalCollateralShare: BigInt!
  totalSupply: BigInt!
  utilization: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transactions: [PairTx!] @derivedFrom(field: "lendingPair")
}
