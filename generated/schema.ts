// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BentoBox extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BentoBox entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BentoBox entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BentoBox", id.toString(), this);
  }

  static load(id: string): BentoBox | null {
    return store.get("BentoBox", id) as BentoBox | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lendingPairs(): Array<string> {
    let value = this.get("lendingPairs");
    return value.toStringArray();
  }

  set lendingPairs(value: Array<string>) {
    this.set("lendingPairs", Value.fromStringArray(value));
  }

  get WETH(): Bytes {
    let value = this.get("WETH");
    return value.toBytes();
  }

  set WETH(value: Bytes) {
    this.set("WETH", Value.fromBytes(value));
  }
}

export class LendingPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LendingPair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LendingPair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LendingPair", id.toString(), this);
  }

  static load(id: string): LendingPair | null {
    return store.get("LendingPair", id) as LendingPair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get bentoBox(): string {
    let value = this.get("bentoBox");
    return value.toString();
  }

  set bentoBox(value: string) {
    this.set("bentoBox", Value.fromString(value));
  }

  get borrowOpeningFee(): BigInt {
    let value = this.get("borrowOpeningFee");
    return value.toBigInt();
  }

  set borrowOpeningFee(value: BigInt) {
    this.set("borrowOpeningFee", Value.fromBigInt(value));
  }

  get closedCollaterizationRate(): BigInt {
    let value = this.get("closedCollaterizationRate");
    return value.toBigInt();
  }

  set closedCollaterizationRate(value: BigInt) {
    this.set("closedCollaterizationRate", Value.fromBigInt(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    return value.toBytes();
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get dev(): Bytes | null {
    let value = this.get("dev");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dev(value: Bytes | null) {
    if (value === null) {
      this.unset("dev");
    } else {
      this.set("dev", Value.fromBytes(value as Bytes));
    }
  }

  get devFee(): BigInt {
    let value = this.get("devFee");
    return value.toBigInt();
  }

  set devFee(value: BigInt) {
    this.set("devFee", Value.fromBigInt(value));
  }

  get exchangeRate(): BigInt {
    let value = this.get("exchangeRate");
    return value.toBigInt();
  }

  set exchangeRate(value: BigInt) {
    this.set("exchangeRate", Value.fromBigInt(value));
  }

  get feeTo(): Bytes {
    let value = this.get("feeTo");
    return value.toBytes();
  }

  set feeTo(value: Bytes) {
    this.set("feeTo", Value.fromBytes(value));
  }

  get feesPendingShare(): BigInt {
    let value = this.get("feesPendingShare");
    return value.toBigInt();
  }

  set feesPendingShare(value: BigInt) {
    this.set("feesPendingShare", Value.fromBigInt(value));
  }

  get interestElasticity(): BigInt {
    let value = this.get("interestElasticity");
    return value.toBigInt();
  }

  set interestElasticity(value: BigInt) {
    this.set("interestElasticity", Value.fromBigInt(value));
  }

  get interestPerBlock(): BigInt {
    let value = this.get("interestPerBlock");
    return value.toBigInt();
  }

  set interestPerBlock(value: BigInt) {
    this.set("interestPerBlock", Value.fromBigInt(value));
  }

  get lastBlockAccrued(): BigInt {
    let value = this.get("lastBlockAccrued");
    return value.toBigInt();
  }

  set lastBlockAccrued(value: BigInt) {
    this.set("lastBlockAccrued", Value.fromBigInt(value));
  }

  get liquidationMultiplier(): BigInt {
    let value = this.get("liquidationMultiplier");
    return value.toBigInt();
  }

  set liquidationMultiplier(value: BigInt) {
    this.set("liquidationMultiplier", Value.fromBigInt(value));
  }

  get masterContract(): Bytes {
    let value = this.get("masterContract");
    return value.toBytes();
  }

  set masterContract(value: Bytes) {
    this.set("masterContract", Value.fromBytes(value));
  }

  get maximumInterestPerBlock(): BigInt {
    let value = this.get("maximumInterestPerBlock");
    return value.toBigInt();
  }

  set maximumInterestPerBlock(value: BigInt) {
    this.set("maximumInterestPerBlock", Value.fromBigInt(value));
  }

  get maximumTargetUtilization(): BigInt {
    let value = this.get("maximumTargetUtilization");
    return value.toBigInt();
  }

  set maximumTargetUtilization(value: BigInt) {
    this.set("maximumTargetUtilization", Value.fromBigInt(value));
  }

  get minimumInterestPerBlock(): BigInt {
    let value = this.get("minimumInterestPerBlock");
    return value.toBigInt();
  }

  set minimumInterestPerBlock(value: BigInt) {
    this.set("minimumInterestPerBlock", Value.fromBigInt(value));
  }

  get minimumTargetUtilization(): BigInt {
    let value = this.get("minimumTargetUtilization");
    return value.toBigInt();
  }

  set minimumTargetUtilization(value: BigInt) {
    this.set("minimumTargetUtilization", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get openCollaterizationRate(): BigInt {
    let value = this.get("openCollaterizationRate");
    return value.toBigInt();
  }

  set openCollaterizationRate(value: BigInt) {
    this.set("openCollaterizationRate", Value.fromBigInt(value));
  }

  get oracle(): Bytes {
    let value = this.get("oracle");
    return value.toBytes();
  }

  set oracle(value: Bytes) {
    this.set("oracle", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get pendingOwner(): Bytes {
    let value = this.get("pendingOwner");
    return value.toBytes();
  }

  set pendingOwner(value: Bytes) {
    this.set("pendingOwner", Value.fromBytes(value));
  }

  get protocolFee(): BigInt {
    let value = this.get("protocolFee");
    return value.toBigInt();
  }

  set protocolFee(value: BigInt) {
    this.set("protocolFee", Value.fromBigInt(value));
  }

  get startingInterestPerBlock(): BigInt {
    let value = this.get("startingInterestPerBlock");
    return value.toBigInt();
  }

  set startingInterestPerBlock(value: BigInt) {
    this.set("startingInterestPerBlock", Value.fromBigInt(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalAssetShare(): BigInt {
    let value = this.get("totalAssetShare");
    return value.toBigInt();
  }

  set totalAssetShare(value: BigInt) {
    this.set("totalAssetShare", Value.fromBigInt(value));
  }

  get totalBorrowFraction(): BigInt {
    let value = this.get("totalBorrowFraction");
    return value.toBigInt();
  }

  set totalBorrowFraction(value: BigInt) {
    this.set("totalBorrowFraction", Value.fromBigInt(value));
  }

  get totalBorrowShare(): BigInt {
    let value = this.get("totalBorrowShare");
    return value.toBigInt();
  }

  set totalBorrowShare(value: BigInt) {
    this.set("totalBorrowShare", Value.fromBigInt(value));
  }

  get totalCollateralShare(): BigInt {
    let value = this.get("totalCollateralShare");
    return value.toBigInt();
  }

  set totalCollateralShare(value: BigInt) {
    this.set("totalCollateralShare", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
