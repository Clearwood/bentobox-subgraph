// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogAddAsset extends ethereum.Event {
  get params(): LogAddAsset__Params {
    return new LogAddAsset__Params(this);
  }
}

export class LogAddAsset__Params {
  _event: LogAddAsset;

  constructor(event: LogAddAsset) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fraction(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogAddBorrow extends ethereum.Event {
  get params(): LogAddBorrow__Params {
    return new LogAddBorrow__Params(this);
  }
}

export class LogAddBorrow__Params {
  _event: LogAddBorrow;

  constructor(event: LogAddBorrow) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fraction(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogAddCollateral extends ethereum.Event {
  get params(): LogAddCollateral__Params {
    return new LogAddCollateral__Params(this);
  }
}

export class LogAddCollateral__Params {
  _event: LogAddCollateral;

  constructor(event: LogAddCollateral) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogExchangeRate extends ethereum.Event {
  get params(): LogExchangeRate__Params {
    return new LogExchangeRate__Params(this);
  }
}

export class LogExchangeRate__Params {
  _event: LogExchangeRate;

  constructor(event: LogExchangeRate) {
    this._event = event;
  }

  get rate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogRemoveAsset extends ethereum.Event {
  get params(): LogRemoveAsset__Params {
    return new LogRemoveAsset__Params(this);
  }
}

export class LogRemoveAsset__Params {
  _event: LogRemoveAsset;

  constructor(event: LogRemoveAsset) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fraction(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRemoveBorrow extends ethereum.Event {
  get params(): LogRemoveBorrow__Params {
    return new LogRemoveBorrow__Params(this);
  }
}

export class LogRemoveBorrow__Params {
  _event: LogRemoveBorrow;

  constructor(event: LogRemoveBorrow) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fraction(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRemoveCollateral extends ethereum.Event {
  get params(): LogRemoveCollateral__Params {
    return new LogRemoveCollateral__Params(this);
  }
}

export class LogRemoveCollateral__Params {
  _event: LogRemoveCollateral;

  constructor(event: LogRemoveCollateral) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LendingPair__peekExchangeRateResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class LendingPair extends ethereum.SmartContract {
  static bind(address: Address): LendingPair {
    return new LendingPair("LendingPair", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bentoBox(): Address {
    let result = super.call("bentoBox", "bentoBox():(address)", []);

    return result[0].toAddress();
  }

  try_bentoBox(): ethereum.CallResult<Address> {
    let result = super.tryCall("bentoBox", "bentoBox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowOpeningFee(): BigInt {
    let result = super.call(
      "borrowOpeningFee",
      "borrowOpeningFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_borrowOpeningFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowOpeningFee",
      "borrowOpeningFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  closedCollaterizationRate(): BigInt {
    let result = super.call(
      "closedCollaterizationRate",
      "closedCollaterizationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_closedCollaterizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "closedCollaterizationRate",
      "closedCollaterizationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  dev(): Address {
    let result = super.call("dev", "dev():(address)", []);

    return result[0].toAddress();
  }

  try_dev(): ethereum.CallResult<Address> {
    let result = super.tryCall("dev", "dev():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  devFee(): BigInt {
    let result = super.call("devFee", "devFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_devFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("devFee", "devFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRate(): BigInt {
    let result = super.call("exchangeRate", "exchangeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exchangeRate", "exchangeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeTo(): Address {
    let result = super.call("feeTo", "feeTo():(address)", []);

    return result[0].toAddress();
  }

  try_feeTo(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeTo", "feeTo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feesPendingShare(): BigInt {
    let result = super.call(
      "feesPendingShare",
      "feesPendingShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_feesPendingShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feesPendingShare",
      "feesPendingShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInitData(
    collateral_: Address,
    asset_: Address,
    oracle_: Address,
    oracleData_: Bytes
  ): Bytes {
    let result = super.call(
      "getInitData",
      "getInitData(address,address,address,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(collateral_),
        ethereum.Value.fromAddress(asset_),
        ethereum.Value.fromAddress(oracle_),
        ethereum.Value.fromBytes(oracleData_)
      ]
    );

    return result[0].toBytes();
  }

  try_getInitData(
    collateral_: Address,
    asset_: Address,
    oracle_: Address,
    oracleData_: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getInitData",
      "getInitData(address,address,address,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(collateral_),
        ethereum.Value.fromAddress(asset_),
        ethereum.Value.fromAddress(oracle_),
        ethereum.Value.fromBytes(oracleData_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  interestElasticity(): BigInt {
    let result = super.call(
      "interestElasticity",
      "interestElasticity():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestElasticity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestElasticity",
      "interestElasticity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestPerBlock(): BigInt {
    let result = super.call(
      "interestPerBlock",
      "interestPerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestPerBlock",
      "interestPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isSolvent(user: Address, open: boolean): boolean {
    let result = super.call("isSolvent", "isSolvent(address,bool):(bool)", [
      ethereum.Value.fromAddress(user),
      ethereum.Value.fromBoolean(open)
    ]);

    return result[0].toBoolean();
  }

  try_isSolvent(user: Address, open: boolean): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSolvent", "isSolvent(address,bool):(bool)", [
      ethereum.Value.fromAddress(user),
      ethereum.Value.fromBoolean(open)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastBlockAccrued(): BigInt {
    let result = super.call(
      "lastBlockAccrued",
      "lastBlockAccrued():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastBlockAccrued(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastBlockAccrued",
      "lastBlockAccrued():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationMultiplier(): BigInt {
    let result = super.call(
      "liquidationMultiplier",
      "liquidationMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationMultiplier",
      "liquidationMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  masterContract(): Address {
    let result = super.call("masterContract", "masterContract():(address)", []);

    return result[0].toAddress();
  }

  try_masterContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterContract",
      "masterContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maximumInterestPerBlock(): BigInt {
    let result = super.call(
      "maximumInterestPerBlock",
      "maximumInterestPerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maximumInterestPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumInterestPerBlock",
      "maximumInterestPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maximumTargetUtilization(): BigInt {
    let result = super.call(
      "maximumTargetUtilization",
      "maximumTargetUtilization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maximumTargetUtilization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumTargetUtilization",
      "maximumTargetUtilization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumInterestPerBlock(): BigInt {
    let result = super.call(
      "minimumInterestPerBlock",
      "minimumInterestPerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumInterestPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumInterestPerBlock",
      "minimumInterestPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumTargetUtilization(): BigInt {
    let result = super.call(
      "minimumTargetUtilization",
      "minimumTargetUtilization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumTargetUtilization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumTargetUtilization",
      "minimumTargetUtilization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  openCollaterizationRate(): BigInt {
    let result = super.call(
      "openCollaterizationRate",
      "openCollaterizationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_openCollaterizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "openCollaterizationRate",
      "openCollaterizationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracleData(): Bytes {
    let result = super.call("oracleData", "oracleData():(bytes)", []);

    return result[0].toBytes();
  }

  try_oracleData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("oracleData", "oracleData():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  peekExchangeRate(): LendingPair__peekExchangeRateResult {
    let result = super.call(
      "peekExchangeRate",
      "peekExchangeRate():(bool,uint256)",
      []
    );

    return new LendingPair__peekExchangeRateResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_peekExchangeRate(): ethereum.CallResult<
    LendingPair__peekExchangeRateResult
  > {
    let result = super.tryCall(
      "peekExchangeRate",
      "peekExchangeRate():(bool,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LendingPair__peekExchangeRateResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFee(): BigInt {
    let result = super.call("protocolFee", "protocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolFee", "protocolFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startingInterestPerBlock(): BigInt {
    let result = super.call(
      "startingInterestPerBlock",
      "startingInterestPerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_startingInterestPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startingInterestPerBlock",
      "startingInterestPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swappers(param0: Address): boolean {
    let result = super.call("swappers", "swappers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_swappers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("swappers", "swappers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAssetShare(): BigInt {
    let result = super.call(
      "totalAssetShare",
      "totalAssetShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAssetShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAssetShare",
      "totalAssetShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrowFraction(): BigInt {
    let result = super.call(
      "totalBorrowFraction",
      "totalBorrowFraction():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalBorrowFraction(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowFraction",
      "totalBorrowFraction():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrowShare(): BigInt {
    let result = super.call(
      "totalBorrowShare",
      "totalBorrowShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalBorrowShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowShare",
      "totalBorrowShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalCollateralShare(): BigInt {
    let result = super.call(
      "totalCollateralShare",
      "totalCollateralShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCollateralShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateralShare",
      "totalCollateralShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateExchangeRate(): BigInt {
    let result = super.call(
      "updateExchangeRate",
      "updateExchangeRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_updateExchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateExchangeRate",
      "updateExchangeRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userBorrowFraction(param0: Address): BigInt {
    let result = super.call(
      "userBorrowFraction",
      "userBorrowFraction(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userBorrowFraction(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBorrowFraction",
      "userBorrowFraction(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userCollateralShare(param0: Address): BigInt {
    let result = super.call(
      "userCollateralShare",
      "userCollateralShare(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userCollateralShare(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userCollateralShare",
      "userCollateralShare(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get bentoBox_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AccrueCall extends ethereum.Call {
  get inputs(): AccrueCall__Inputs {
    return new AccrueCall__Inputs(this);
  }

  get outputs(): AccrueCall__Outputs {
    return new AccrueCall__Outputs(this);
  }
}

export class AccrueCall__Inputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AccrueCall__Outputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AddAssetCall extends ethereum.Call {
  get inputs(): AddAssetCall__Inputs {
    return new AddAssetCall__Inputs(this);
  }

  get outputs(): AddAssetCall__Outputs {
    return new AddAssetCall__Outputs(this);
  }
}

export class AddAssetCall__Inputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddAssetCall__Outputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }
}

export class AddAssetFromBentoCall extends ethereum.Call {
  get inputs(): AddAssetFromBentoCall__Inputs {
    return new AddAssetFromBentoCall__Inputs(this);
  }

  get outputs(): AddAssetFromBentoCall__Outputs {
    return new AddAssetFromBentoCall__Outputs(this);
  }
}

export class AddAssetFromBentoCall__Inputs {
  _call: AddAssetFromBentoCall;

  constructor(call: AddAssetFromBentoCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddAssetFromBentoCall__Outputs {
  _call: AddAssetFromBentoCall;

  constructor(call: AddAssetFromBentoCall) {
    this._call = call;
  }
}

export class AddAssetFromBentoToCall extends ethereum.Call {
  get inputs(): AddAssetFromBentoToCall__Inputs {
    return new AddAssetFromBentoToCall__Inputs(this);
  }

  get outputs(): AddAssetFromBentoToCall__Outputs {
    return new AddAssetFromBentoToCall__Outputs(this);
  }
}

export class AddAssetFromBentoToCall__Inputs {
  _call: AddAssetFromBentoToCall;

  constructor(call: AddAssetFromBentoToCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddAssetFromBentoToCall__Outputs {
  _call: AddAssetFromBentoToCall;

  constructor(call: AddAssetFromBentoToCall) {
    this._call = call;
  }
}

export class AddAssetToCall extends ethereum.Call {
  get inputs(): AddAssetToCall__Inputs {
    return new AddAssetToCall__Inputs(this);
  }

  get outputs(): AddAssetToCall__Outputs {
    return new AddAssetToCall__Outputs(this);
  }
}

export class AddAssetToCall__Inputs {
  _call: AddAssetToCall;

  constructor(call: AddAssetToCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddAssetToCall__Outputs {
  _call: AddAssetToCall;

  constructor(call: AddAssetToCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class AddCollateralFromBentoCall extends ethereum.Call {
  get inputs(): AddCollateralFromBentoCall__Inputs {
    return new AddCollateralFromBentoCall__Inputs(this);
  }

  get outputs(): AddCollateralFromBentoCall__Outputs {
    return new AddCollateralFromBentoCall__Outputs(this);
  }
}

export class AddCollateralFromBentoCall__Inputs {
  _call: AddCollateralFromBentoCall;

  constructor(call: AddCollateralFromBentoCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddCollateralFromBentoCall__Outputs {
  _call: AddCollateralFromBentoCall;

  constructor(call: AddCollateralFromBentoCall) {
    this._call = call;
  }
}

export class AddCollateralFromBentoToCall extends ethereum.Call {
  get inputs(): AddCollateralFromBentoToCall__Inputs {
    return new AddCollateralFromBentoToCall__Inputs(this);
  }

  get outputs(): AddCollateralFromBentoToCall__Outputs {
    return new AddCollateralFromBentoToCall__Outputs(this);
  }
}

export class AddCollateralFromBentoToCall__Inputs {
  _call: AddCollateralFromBentoToCall;

  constructor(call: AddCollateralFromBentoToCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddCollateralFromBentoToCall__Outputs {
  _call: AddCollateralFromBentoToCall;

  constructor(call: AddCollateralFromBentoToCall) {
    this._call = call;
  }
}

export class AddCollateralToCall extends ethereum.Call {
  get inputs(): AddCollateralToCall__Inputs {
    return new AddCollateralToCall__Inputs(this);
  }

  get outputs(): AddCollateralToCall__Outputs {
    return new AddCollateralToCall__Outputs(this);
  }
}

export class AddCollateralToCall__Inputs {
  _call: AddCollateralToCall;

  constructor(call: AddCollateralToCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddCollateralToCall__Outputs {
  _call: AddCollateralToCall;

  constructor(call: AddCollateralToCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BatchCall extends ethereum.Call {
  get inputs(): BatchCall__Inputs {
    return new BatchCall__Inputs(this);
  }

  get outputs(): BatchCall__Outputs {
    return new BatchCall__Outputs(this);
  }
}

export class BatchCall__Inputs {
  _call: BatchCall;

  constructor(call: BatchCall) {
    this._call = call;
  }

  get calls(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get revertOnFail(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class BatchCall__Outputs {
  _call: BatchCall;

  constructor(call: BatchCall) {
    this._call = call;
  }

  get value0(): Array<boolean> {
    return this._call.outputValues[0].value.toBooleanArray();
  }

  get value1(): Array<Bytes> {
    return this._call.outputValues[1].value.toBytesArray();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class BorrowToBentoCall extends ethereum.Call {
  get inputs(): BorrowToBentoCall__Inputs {
    return new BorrowToBentoCall__Inputs(this);
  }

  get outputs(): BorrowToBentoCall__Outputs {
    return new BorrowToBentoCall__Outputs(this);
  }
}

export class BorrowToBentoCall__Inputs {
  _call: BorrowToBentoCall;

  constructor(call: BorrowToBentoCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BorrowToBentoCall__Outputs {
  _call: BorrowToBentoCall;

  constructor(call: BorrowToBentoCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get borrowFractions(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get swapper(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get open(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RemoveAssetCall extends ethereum.Call {
  get inputs(): RemoveAssetCall__Inputs {
    return new RemoveAssetCall__Inputs(this);
  }

  get outputs(): RemoveAssetCall__Outputs {
    return new RemoveAssetCall__Outputs(this);
  }
}

export class RemoveAssetCall__Inputs {
  _call: RemoveAssetCall;

  constructor(call: RemoveAssetCall) {
    this._call = call;
  }

  get fraction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveAssetCall__Outputs {
  _call: RemoveAssetCall;

  constructor(call: RemoveAssetCall) {
    this._call = call;
  }
}

export class RemoveAssetToBentoCall extends ethereum.Call {
  get inputs(): RemoveAssetToBentoCall__Inputs {
    return new RemoveAssetToBentoCall__Inputs(this);
  }

  get outputs(): RemoveAssetToBentoCall__Outputs {
    return new RemoveAssetToBentoCall__Outputs(this);
  }
}

export class RemoveAssetToBentoCall__Inputs {
  _call: RemoveAssetToBentoCall;

  constructor(call: RemoveAssetToBentoCall) {
    this._call = call;
  }

  get fraction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveAssetToBentoCall__Outputs {
  _call: RemoveAssetToBentoCall;

  constructor(call: RemoveAssetToBentoCall) {
    this._call = call;
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }
}

export class RemoveCollateralToBentoCall extends ethereum.Call {
  get inputs(): RemoveCollateralToBentoCall__Inputs {
    return new RemoveCollateralToBentoCall__Inputs(this);
  }

  get outputs(): RemoveCollateralToBentoCall__Outputs {
    return new RemoveCollateralToBentoCall__Outputs(this);
  }
}

export class RemoveCollateralToBentoCall__Inputs {
  _call: RemoveCollateralToBentoCall;

  constructor(call: RemoveCollateralToBentoCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveCollateralToBentoCall__Outputs {
  _call: RemoveCollateralToBentoCall;

  constructor(call: RemoveCollateralToBentoCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get fraction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class RepayForCall extends ethereum.Call {
  get inputs(): RepayForCall__Inputs {
    return new RepayForCall__Inputs(this);
  }

  get outputs(): RepayForCall__Outputs {
    return new RepayForCall__Outputs(this);
  }
}

export class RepayForCall__Inputs {
  _call: RepayForCall;

  constructor(call: RepayForCall) {
    this._call = call;
  }

  get fraction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RepayForCall__Outputs {
  _call: RepayForCall;

  constructor(call: RepayForCall) {
    this._call = call;
  }
}

export class RepayFromBentoCall extends ethereum.Call {
  get inputs(): RepayFromBentoCall__Inputs {
    return new RepayFromBentoCall__Inputs(this);
  }

  get outputs(): RepayFromBentoCall__Outputs {
    return new RepayFromBentoCall__Outputs(this);
  }
}

export class RepayFromBentoCall__Inputs {
  _call: RepayFromBentoCall;

  constructor(call: RepayFromBentoCall) {
    this._call = call;
  }

  get fraction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayFromBentoCall__Outputs {
  _call: RepayFromBentoCall;

  constructor(call: RepayFromBentoCall) {
    this._call = call;
  }
}

export class RepayFromBentoToCall extends ethereum.Call {
  get inputs(): RepayFromBentoToCall__Inputs {
    return new RepayFromBentoToCall__Inputs(this);
  }

  get outputs(): RepayFromBentoToCall__Outputs {
    return new RepayFromBentoToCall__Outputs(this);
  }
}

export class RepayFromBentoToCall__Inputs {
  _call: RepayFromBentoToCall;

  constructor(call: RepayFromBentoToCall) {
    this._call = call;
  }

  get fraction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RepayFromBentoToCall__Outputs {
  _call: RepayFromBentoToCall;

  constructor(call: RepayFromBentoToCall) {
    this._call = call;
  }
}

export class SetDevCall extends ethereum.Call {
  get inputs(): SetDevCall__Inputs {
    return new SetDevCall__Inputs(this);
  }

  get outputs(): SetDevCall__Outputs {
    return new SetDevCall__Outputs(this);
  }
}

export class SetDevCall__Inputs {
  _call: SetDevCall;

  constructor(call: SetDevCall) {
    this._call = call;
  }

  get newDev(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDevCall__Outputs {
  _call: SetDevCall;

  constructor(call: SetDevCall) {
    this._call = call;
  }
}

export class SetFeeToCall extends ethereum.Call {
  get inputs(): SetFeeToCall__Inputs {
    return new SetFeeToCall__Inputs(this);
  }

  get outputs(): SetFeeToCall__Outputs {
    return new SetFeeToCall__Outputs(this);
  }
}

export class SetFeeToCall__Inputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }

  get newFeeTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeToCall__Outputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }
}

export class SetSwapperCall extends ethereum.Call {
  get inputs(): SetSwapperCall__Inputs {
    return new SetSwapperCall__Inputs(this);
  }

  get outputs(): SetSwapperCall__Outputs {
    return new SetSwapperCall__Outputs(this);
  }
}

export class SetSwapperCall__Inputs {
  _call: SetSwapperCall;

  constructor(call: SetSwapperCall) {
    this._call = call;
  }

  get swapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get enable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetSwapperCall__Outputs {
  _call: SetSwapperCall;

  constructor(call: SetSwapperCall) {
    this._call = call;
  }
}

export class ShortCall extends ethereum.Call {
  get inputs(): ShortCall__Inputs {
    return new ShortCall__Inputs(this);
  }

  get outputs(): ShortCall__Outputs {
    return new ShortCall__Outputs(this);
  }
}

export class ShortCall__Inputs {
  _call: ShortCall;

  constructor(call: ShortCall) {
    this._call = call;
  }

  get swapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assetShare(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minCollateralShare(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ShortCall__Outputs {
  _call: ShortCall;

  constructor(call: ShortCall) {
    this._call = call;
  }
}

export class SwipeCall extends ethereum.Call {
  get inputs(): SwipeCall__Inputs {
    return new SwipeCall__Inputs(this);
  }

  get outputs(): SwipeCall__Outputs {
    return new SwipeCall__Outputs(this);
  }
}

export class SwipeCall__Inputs {
  _call: SwipeCall;

  constructor(call: SwipeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SwipeCall__Outputs {
  _call: SwipeCall;

  constructor(call: SwipeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipDirectCall extends ethereum.Call {
  get inputs(): TransferOwnershipDirectCall__Inputs {
    return new TransferOwnershipDirectCall__Inputs(this);
  }

  get outputs(): TransferOwnershipDirectCall__Outputs {
    return new TransferOwnershipDirectCall__Outputs(this);
  }
}

export class TransferOwnershipDirectCall__Inputs {
  _call: TransferOwnershipDirectCall;

  constructor(call: TransferOwnershipDirectCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipDirectCall__Outputs {
  _call: TransferOwnershipDirectCall;

  constructor(call: TransferOwnershipDirectCall) {
    this._call = call;
  }
}

export class UnwindCall extends ethereum.Call {
  get inputs(): UnwindCall__Inputs {
    return new UnwindCall__Inputs(this);
  }

  get outputs(): UnwindCall__Outputs {
    return new UnwindCall__Outputs(this);
  }
}

export class UnwindCall__Inputs {
  _call: UnwindCall;

  constructor(call: UnwindCall) {
    this._call = call;
  }

  get swapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrowShare(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxAmountCollateral(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UnwindCall__Outputs {
  _call: UnwindCall;

  constructor(call: UnwindCall) {
    this._call = call;
  }
}

export class UpdateExchangeRateCall extends ethereum.Call {
  get inputs(): UpdateExchangeRateCall__Inputs {
    return new UpdateExchangeRateCall__Inputs(this);
  }

  get outputs(): UpdateExchangeRateCall__Outputs {
    return new UpdateExchangeRateCall__Outputs(this);
  }
}

export class UpdateExchangeRateCall__Inputs {
  _call: UpdateExchangeRateCall;

  constructor(call: UpdateExchangeRateCall) {
    this._call = call;
  }
}

export class UpdateExchangeRateCall__Outputs {
  _call: UpdateExchangeRateCall;

  constructor(call: UpdateExchangeRateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
