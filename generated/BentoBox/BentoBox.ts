// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogDeploy extends ethereum.Event {
  get params(): LogDeploy__Params {
    return new LogDeploy__Params(this);
  }
}

export class LogDeploy__Params {
  _event: LogDeploy;

  constructor(event: LogDeploy) {
    this._event = event;
  }

  get masterContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get clone_address(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LogDeposit extends ethereum.Event {
  get params(): LogDeposit__Params {
    return new LogDeposit__Params(this);
  }
}

export class LogDeposit__Params {
  _event: LogDeposit;

  constructor(event: LogDeposit) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LogFlashLoan extends ethereum.Event {
  get params(): LogFlashLoan__Params {
    return new LogFlashLoan__Params(this);
  }
}

export class LogFlashLoan__Params {
  _event: LogFlashLoan;

  constructor(event: LogFlashLoan) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogSetMasterContractApproval extends ethereum.Event {
  get params(): LogSetMasterContractApproval__Params {
    return new LogSetMasterContractApproval__Params(this);
  }
}

export class LogSetMasterContractApproval__Params {
  _event: LogSetMasterContractApproval;

  constructor(event: LogSetMasterContractApproval) {
    this._event = event;
  }

  get masterContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class LogTransfer extends ethereum.Event {
  get params(): LogTransfer__Params {
    return new LogTransfer__Params(this);
  }
}

export class LogTransfer__Params {
  _event: LogTransfer;

  constructor(event: LogTransfer) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LogWithdraw extends ethereum.Event {
  get params(): LogWithdraw__Params {
    return new LogWithdraw__Params(this);
  }
}

export class LogWithdraw__Params {
  _event: LogWithdraw;

  constructor(event: LogWithdraw) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BentoBox extends ethereum.SmartContract {
  static bind(address: Address): BentoBox {
    return new BentoBox("BentoBox", address);
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  masterContractApproved(param0: Address, param1: Address): boolean {
    let result = super.call(
      "masterContractApproved",
      "masterContractApproved(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_masterContractApproved(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "masterContractApproved",
      "masterContractApproved(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  masterContractOf(param0: Address): Address {
    let result = super.call(
      "masterContractOf",
      "masterContractOf(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_masterContractOf(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterContractOf",
      "masterContractOf(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shareOf(param0: Address, param1: Address): BigInt {
    let result = super.call("shareOf", "shareOf(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_shareOf(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shareOf",
      "shareOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAmount(param0: Address): BigInt {
    let result = super.call("totalAmount", "totalAmount(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalAmount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAmount",
      "totalAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShare(param0: Address): BigInt {
    let result = super.call("totalShare", "totalShare(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalShare(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShare", "totalShare(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toAmount(token: Address, share: BigInt): BigInt {
    let result = super.call("toAmount", "toAmount(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromUnsignedBigInt(share)
    ]);

    return result[0].toBigInt();
  }

  try_toAmount(token: Address, share: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toAmount",
      "toAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toShare(token: Address, amount: BigInt): BigInt {
    let result = super.call("toShare", "toShare(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_toShare(token: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toShare",
      "toShare(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(token: Address, to: Address, amount: BigInt): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    token: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawFrom(
    token: Address,
    from: Address,
    to: Address,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "withdrawFrom",
      "withdrawFrom(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawFrom(
    token: Address,
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFrom",
      "withdrawFrom(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawShare(token: Address, to: Address, share: BigInt): BigInt {
    let result = super.call(
      "withdrawShare",
      "withdrawShare(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawShare(
    token: Address,
    to: Address,
    share: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawShare",
      "withdrawShare(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawShareFrom(
    token: Address,
    from: Address,
    to: Address,
    share: BigInt
  ): BigInt {
    let result = super.call(
      "withdrawShareFrom",
      "withdrawShareFrom(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawShareFrom(
    token: Address,
    from: Address,
    to: Address,
    share: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawShareFrom",
      "withdrawShareFrom(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(token: Address, to: Address, amount: BigInt): BigInt {
    let result = super.call(
      "transfer",
      "transfer(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_transfer(
    token: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transfer",
      "transfer(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(
    token: Address,
    from: Address,
    to: Address,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferFrom(
    token: Address,
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferMultiple(
    token: Address,
    tos: Array<Address>,
    amounts: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "transferMultiple",
      "transferMultiple(address,address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddressArray(tos),
        ethereum.Value.fromUnsignedBigIntArray(amounts)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferMultiple(
    token: Address,
    tos: Array<Address>,
    amounts: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferMultiple",
      "transferMultiple(address,address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddressArray(tos),
        ethereum.Value.fromUnsignedBigIntArray(amounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferMultipleFrom(
    token: Address,
    from: Address,
    tos: Array<Address>,
    amounts: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "transferMultipleFrom",
      "transferMultipleFrom(address,address,address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddressArray(tos),
        ethereum.Value.fromUnsignedBigIntArray(amounts)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferMultipleFrom(
    token: Address,
    from: Address,
    tos: Array<Address>,
    amounts: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferMultipleFrom",
      "transferMultipleFrom(address,address,address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddressArray(tos),
        ethereum.Value.fromUnsignedBigIntArray(amounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferShare(token: Address, to: Address, share: BigInt): BigInt {
    let result = super.call(
      "transferShare",
      "transferShare(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferShare(
    token: Address,
    to: Address,
    share: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferShare",
      "transferShare(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferShareFrom(
    token: Address,
    from: Address,
    to: Address,
    share: BigInt
  ): BigInt {
    let result = super.call(
      "transferShareFrom",
      "transferShareFrom(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferShareFrom(
    token: Address,
    from: Address,
    to: Address,
    share: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferShareFrom",
      "transferShareFrom(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferMultipleShare(
    token: Address,
    tos: Array<Address>,
    shares: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "transferMultipleShare",
      "transferMultipleShare(address,address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddressArray(tos),
        ethereum.Value.fromUnsignedBigIntArray(shares)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferMultipleShare(
    token: Address,
    tos: Array<Address>,
    shares: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferMultipleShare",
      "transferMultipleShare(address,address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddressArray(tos),
        ethereum.Value.fromUnsignedBigIntArray(shares)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferMultipleShareFrom(
    token: Address,
    from: Address,
    tos: Array<Address>,
    shares: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "transferMultipleShareFrom",
      "transferMultipleShareFrom(address,address,address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddressArray(tos),
        ethereum.Value.fromUnsignedBigIntArray(shares)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferMultipleShareFrom(
    token: Address,
    from: Address,
    tos: Array<Address>,
    shares: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferMultipleShareFrom",
      "transferMultipleShareFrom(address,address,address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddressArray(tos),
        ethereum.Value.fromUnsignedBigIntArray(shares)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  skim(token: Address): BigInt {
    let result = super.call("skim", "skim(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_skim(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("skim", "skim(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  skimTo(token: Address, to: Address): BigInt {
    let result = super.call("skimTo", "skimTo(address,address):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBigInt();
  }

  try_skimTo(token: Address, to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("skimTo", "skimTo(address,address):(uint256)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  skimETH(): BigInt {
    let result = super.call("skimETH", "skimETH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_skimETH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("skimETH", "skimETH():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  skimETHTo(to: Address): BigInt {
    let result = super.call("skimETHTo", "skimETHTo(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBigInt();
  }

  try_skimETHTo(to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("skimETHTo", "skimETHTo(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get WETH_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get masterContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }
}

export class SetMasterContractApprovalCall extends ethereum.Call {
  get inputs(): SetMasterContractApprovalCall__Inputs {
    return new SetMasterContractApprovalCall__Inputs(this);
  }

  get outputs(): SetMasterContractApprovalCall__Outputs {
    return new SetMasterContractApprovalCall__Outputs(this);
  }
}

export class SetMasterContractApprovalCall__Inputs {
  _call: SetMasterContractApprovalCall;

  constructor(call: SetMasterContractApprovalCall) {
    this._call = call;
  }

  get masterContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetMasterContractApprovalCall__Outputs {
  _call: SetMasterContractApprovalCall;

  constructor(call: SetMasterContractApprovalCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositToCall extends ethereum.Call {
  get inputs(): DepositToCall__Inputs {
    return new DepositToCall__Inputs(this);
  }

  get outputs(): DepositToCall__Outputs {
    return new DepositToCall__Outputs(this);
  }
}

export class DepositToCall__Inputs {
  _call: DepositToCall;

  constructor(call: DepositToCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DepositToCall__Outputs {
  _call: DepositToCall;

  constructor(call: DepositToCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositShareCall extends ethereum.Call {
  get inputs(): DepositShareCall__Inputs {
    return new DepositShareCall__Inputs(this);
  }

  get outputs(): DepositShareCall__Outputs {
    return new DepositShareCall__Outputs(this);
  }
}

export class DepositShareCall__Inputs {
  _call: DepositShareCall;

  constructor(call: DepositShareCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositShareCall__Outputs {
  _call: DepositShareCall;

  constructor(call: DepositShareCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositShareToCall extends ethereum.Call {
  get inputs(): DepositShareToCall__Inputs {
    return new DepositShareToCall__Inputs(this);
  }

  get outputs(): DepositShareToCall__Outputs {
    return new DepositShareToCall__Outputs(this);
  }
}

export class DepositShareToCall__Inputs {
  _call: DepositShareToCall;

  constructor(call: DepositShareToCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DepositShareToCall__Outputs {
  _call: DepositShareToCall;

  constructor(call: DepositShareToCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositWithPermitCall extends ethereum.Call {
  get inputs(): DepositWithPermitCall__Inputs {
    return new DepositWithPermitCall__Inputs(this);
  }

  get outputs(): DepositWithPermitCall__Outputs {
    return new DepositWithPermitCall__Outputs(this);
  }
}

export class DepositWithPermitCall__Inputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class DepositWithPermitCall__Outputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositWithPermitToCall extends ethereum.Call {
  get inputs(): DepositWithPermitToCall__Inputs {
    return new DepositWithPermitToCall__Inputs(this);
  }

  get outputs(): DepositWithPermitToCall__Outputs {
    return new DepositWithPermitToCall__Outputs(this);
  }
}

export class DepositWithPermitToCall__Inputs {
  _call: DepositWithPermitToCall;

  constructor(call: DepositWithPermitToCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class DepositWithPermitToCall__Outputs {
  _call: DepositWithPermitToCall;

  constructor(call: DepositWithPermitToCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositShareWithPermitCall extends ethereum.Call {
  get inputs(): DepositShareWithPermitCall__Inputs {
    return new DepositShareWithPermitCall__Inputs(this);
  }

  get outputs(): DepositShareWithPermitCall__Outputs {
    return new DepositShareWithPermitCall__Outputs(this);
  }
}

export class DepositShareWithPermitCall__Inputs {
  _call: DepositShareWithPermitCall;

  constructor(call: DepositShareWithPermitCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class DepositShareWithPermitCall__Outputs {
  _call: DepositShareWithPermitCall;

  constructor(call: DepositShareWithPermitCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositShareWithPermitToCall extends ethereum.Call {
  get inputs(): DepositShareWithPermitToCall__Inputs {
    return new DepositShareWithPermitToCall__Inputs(this);
  }

  get outputs(): DepositShareWithPermitToCall__Outputs {
    return new DepositShareWithPermitToCall__Outputs(this);
  }
}

export class DepositShareWithPermitToCall__Inputs {
  _call: DepositShareWithPermitToCall;

  constructor(call: DepositShareWithPermitToCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class DepositShareWithPermitToCall__Outputs {
  _call: DepositShareWithPermitToCall;

  constructor(call: DepositShareWithPermitToCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawFromCall extends ethereum.Call {
  get inputs(): WithdrawFromCall__Inputs {
    return new WithdrawFromCall__Inputs(this);
  }

  get outputs(): WithdrawFromCall__Outputs {
    return new WithdrawFromCall__Outputs(this);
  }
}

export class WithdrawFromCall__Inputs {
  _call: WithdrawFromCall;

  constructor(call: WithdrawFromCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WithdrawFromCall__Outputs {
  _call: WithdrawFromCall;

  constructor(call: WithdrawFromCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawShareCall extends ethereum.Call {
  get inputs(): WithdrawShareCall__Inputs {
    return new WithdrawShareCall__Inputs(this);
  }

  get outputs(): WithdrawShareCall__Outputs {
    return new WithdrawShareCall__Outputs(this);
  }
}

export class WithdrawShareCall__Inputs {
  _call: WithdrawShareCall;

  constructor(call: WithdrawShareCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawShareCall__Outputs {
  _call: WithdrawShareCall;

  constructor(call: WithdrawShareCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawShareFromCall extends ethereum.Call {
  get inputs(): WithdrawShareFromCall__Inputs {
    return new WithdrawShareFromCall__Inputs(this);
  }

  get outputs(): WithdrawShareFromCall__Outputs {
    return new WithdrawShareFromCall__Outputs(this);
  }
}

export class WithdrawShareFromCall__Inputs {
  _call: WithdrawShareFromCall;

  constructor(call: WithdrawShareFromCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WithdrawShareFromCall__Outputs {
  _call: WithdrawShareFromCall;

  constructor(call: WithdrawShareFromCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferMultipleCall extends ethereum.Call {
  get inputs(): TransferMultipleCall__Inputs {
    return new TransferMultipleCall__Inputs(this);
  }

  get outputs(): TransferMultipleCall__Outputs {
    return new TransferMultipleCall__Outputs(this);
  }
}

export class TransferMultipleCall__Inputs {
  _call: TransferMultipleCall;

  constructor(call: TransferMultipleCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tos(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class TransferMultipleCall__Outputs {
  _call: TransferMultipleCall;

  constructor(call: TransferMultipleCall) {
    this._call = call;
  }

  get sumShares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferMultipleFromCall extends ethereum.Call {
  get inputs(): TransferMultipleFromCall__Inputs {
    return new TransferMultipleFromCall__Inputs(this);
  }

  get outputs(): TransferMultipleFromCall__Outputs {
    return new TransferMultipleFromCall__Outputs(this);
  }
}

export class TransferMultipleFromCall__Inputs {
  _call: TransferMultipleFromCall;

  constructor(call: TransferMultipleFromCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tos(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class TransferMultipleFromCall__Outputs {
  _call: TransferMultipleFromCall;

  constructor(call: TransferMultipleFromCall) {
    this._call = call;
  }

  get sumShares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferShareCall extends ethereum.Call {
  get inputs(): TransferShareCall__Inputs {
    return new TransferShareCall__Inputs(this);
  }

  get outputs(): TransferShareCall__Outputs {
    return new TransferShareCall__Outputs(this);
  }
}

export class TransferShareCall__Inputs {
  _call: TransferShareCall;

  constructor(call: TransferShareCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferShareCall__Outputs {
  _call: TransferShareCall;

  constructor(call: TransferShareCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferShareFromCall extends ethereum.Call {
  get inputs(): TransferShareFromCall__Inputs {
    return new TransferShareFromCall__Inputs(this);
  }

  get outputs(): TransferShareFromCall__Outputs {
    return new TransferShareFromCall__Outputs(this);
  }
}

export class TransferShareFromCall__Inputs {
  _call: TransferShareFromCall;

  constructor(call: TransferShareFromCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferShareFromCall__Outputs {
  _call: TransferShareFromCall;

  constructor(call: TransferShareFromCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferMultipleShareCall extends ethereum.Call {
  get inputs(): TransferMultipleShareCall__Inputs {
    return new TransferMultipleShareCall__Inputs(this);
  }

  get outputs(): TransferMultipleShareCall__Outputs {
    return new TransferMultipleShareCall__Outputs(this);
  }
}

export class TransferMultipleShareCall__Inputs {
  _call: TransferMultipleShareCall;

  constructor(call: TransferMultipleShareCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tos(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class TransferMultipleShareCall__Outputs {
  _call: TransferMultipleShareCall;

  constructor(call: TransferMultipleShareCall) {
    this._call = call;
  }

  get sumAmounts(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferMultipleShareFromCall extends ethereum.Call {
  get inputs(): TransferMultipleShareFromCall__Inputs {
    return new TransferMultipleShareFromCall__Inputs(this);
  }

  get outputs(): TransferMultipleShareFromCall__Outputs {
    return new TransferMultipleShareFromCall__Outputs(this);
  }
}

export class TransferMultipleShareFromCall__Inputs {
  _call: TransferMultipleShareFromCall;

  constructor(call: TransferMultipleShareFromCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tos(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class TransferMultipleShareFromCall__Outputs {
  _call: TransferMultipleShareFromCall;

  constructor(call: TransferMultipleShareFromCall) {
    this._call = call;
  }

  get sumAmounts(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SkimCall extends ethereum.Call {
  get inputs(): SkimCall__Inputs {
    return new SkimCall__Inputs(this);
  }

  get outputs(): SkimCall__Outputs {
    return new SkimCall__Outputs(this);
  }
}

export class SkimCall__Inputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SkimCall__Outputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SkimToCall extends ethereum.Call {
  get inputs(): SkimToCall__Inputs {
    return new SkimToCall__Inputs(this);
  }

  get outputs(): SkimToCall__Outputs {
    return new SkimToCall__Outputs(this);
  }
}

export class SkimToCall__Inputs {
  _call: SkimToCall;

  constructor(call: SkimToCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SkimToCall__Outputs {
  _call: SkimToCall;

  constructor(call: SkimToCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SkimETHCall extends ethereum.Call {
  get inputs(): SkimETHCall__Inputs {
    return new SkimETHCall__Inputs(this);
  }

  get outputs(): SkimETHCall__Outputs {
    return new SkimETHCall__Outputs(this);
  }
}

export class SkimETHCall__Inputs {
  _call: SkimETHCall;

  constructor(call: SkimETHCall) {
    this._call = call;
  }
}

export class SkimETHCall__Outputs {
  _call: SkimETHCall;

  constructor(call: SkimETHCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SkimETHToCall extends ethereum.Call {
  get inputs(): SkimETHToCall__Inputs {
    return new SkimETHToCall__Inputs(this);
  }

  get outputs(): SkimETHToCall__Outputs {
    return new SkimETHToCall__Outputs(this);
  }
}

export class SkimETHToCall__Inputs {
  _call: SkimETHToCall;

  constructor(call: SkimETHToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SkimETHToCall__Outputs {
  _call: SkimETHToCall;

  constructor(call: SkimETHToCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class FlashLoanCall extends ethereum.Call {
  get inputs(): FlashLoanCall__Inputs {
    return new FlashLoanCall__Inputs(this);
  }

  get outputs(): FlashLoanCall__Outputs {
    return new FlashLoanCall__Outputs(this);
  }
}

export class FlashLoanCall__Inputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get params(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashLoanCall__Outputs {
  _call: FlashLoanCall;

  constructor(call: FlashLoanCall) {
    this._call = call;
  }
}

export class FlashLoanMultipleCall extends ethereum.Call {
  get inputs(): FlashLoanMultipleCall__Inputs {
    return new FlashLoanMultipleCall__Inputs(this);
  }

  get outputs(): FlashLoanMultipleCall__Outputs {
    return new FlashLoanMultipleCall__Outputs(this);
  }
}

export class FlashLoanMultipleCall__Inputs {
  _call: FlashLoanMultipleCall;

  constructor(call: FlashLoanMultipleCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get params(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashLoanMultipleCall__Outputs {
  _call: FlashLoanMultipleCall;

  constructor(call: FlashLoanMultipleCall) {
    this._call = call;
  }
}

export class BatchCall extends ethereum.Call {
  get inputs(): BatchCall__Inputs {
    return new BatchCall__Inputs(this);
  }

  get outputs(): BatchCall__Outputs {
    return new BatchCall__Outputs(this);
  }
}

export class BatchCall__Inputs {
  _call: BatchCall;

  constructor(call: BatchCall) {
    this._call = call;
  }

  get calls(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get revertOnFail(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class BatchCall__Outputs {
  _call: BatchCall;

  constructor(call: BatchCall) {
    this._call = call;
  }

  get successes(): Array<boolean> {
    return this._call.outputValues[0].value.toBooleanArray();
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[1].value.toBytesArray();
  }
}
